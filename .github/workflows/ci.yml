on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false --local
          poetry install --no-interaction --no-ansi

      - name: Lint (black + isort)
        run: |
          poetry run black --check .
          poetry run isort --check-only .

      - name: Run tests (junit + coverage)
        run: |
          mkdir -p test-reports
          poetry run pytest -v \
            api/tests/ src/tests/ \
            --junitxml=test-reports/junit.xml \
            --cov=src --cov=api \
            --cov-report=xml:test-reports/coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: junit
          path: test-reports/junit.xml

  build-image:
    name: Build Docker image + smoke test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (no push)
        run: docker buildx build --load -t cerverus:ci .

      - name: Smoke test: endpoints
        continue-on-error: false
        timeout-minutes: 5
        run: |
         # Start container with clean up
         cid=$(docker run -d -p 8000:8000 cerverus:ci)
         echo "Container ID: $cid"
         
         # Wait for startup with 2 minute timeout
         timeout 120 bash -c 'until curl -sS --fail http://localhost:8000/health >/dev/null; do
           echo "Waiting for container to start..."
           sleep 5
         done' || (docker logs $cid && exit 1)
         
         # Test anomaly detection endpoint
         curl -v -H "Content-Type: application/json" \
           -d '{"data":[{"timestamp":"2025-01-01T00:00:00","close":100}]}' \
           http://localhost:8000/api/v1/anomaly/detect
         
         # Cleanup
         docker stop $cid && docker rm $cid