name: Build, Test and Smoke Test
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
env:
  PYTHON_VERSION: "3.11"
jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        run: poetry install --with dev,test
      
      - name: Run Black (code formatting)
        run: poetry run black --check api/ src/ tools/
      
      - name: Run isort (import sorting)
        run: poetry run isort --check-only api/ src/ tools/
      
      - name: Run pylint (code quality)
        run: poetry run pylint src/ --fail-under=8.0
      
      - name: Run pytest (unit tests)
        run: poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
  build-and-smoke-test:
    name: Build Docker image + Smoke test
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build image (no push)
        run: docker buildx build --load -t cerverus:ci .
      
      - name: Smoke test with docker-compose
        run: |
          # Create docker-compose.ci.yml without version attribute
          printf "%s\n" \
            "services:" \
            "  api:" \
            "    image: cerverus:ci" \
            "    ports:" \
            "      - \"8000:8000\"" \
            "    environment:" \
            "      - DATABASE_URL=postgresql://postgres:example@db:5432/cerverus" \
            "      - ENVIRONMENT=test" \
            "    healthcheck:" \
            "      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]" \
            "      interval: 30s" \
            "      timeout: 10s" \
            "      retries: 3" \
            "      start_period: 40s" \
            "    depends_on:" \
            "      db:" \
            "        condition: service_healthy" \
            "  db:" \
            "    image: postgres:15" \
            "    environment:" \
            "      POSTGRES_USER: postgres" \
            "      POSTGRES_PASSWORD: example" \
            "      POSTGRES_DB: cerverus" \
            "    healthcheck:" \
            "      test: [\"CMD-SHELL\", \"pg_isready -U postgres -d cerverus\"]" \
            "      interval: 10s" \
            "      timeout: 5s" \
            "      retries: 5" \
            "      start_period: 10s" \
            > docker-compose.ci.yml
          
          # Start services
          docker compose -f docker-compose.ci.yml up -d
          
          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          timeout 60 bash -c 'until docker compose -f docker-compose.ci.yml exec -T db pg_isready -U postgres -d cerverus; do
            sleep 2
          done'
          echo "Database is ready!"
          
          # Wait for API health check
          echo "Waiting for API health check..."
          timeout 120 bash -c 'until docker compose -f docker-compose.ci.yml exec api curl -f http://localhost:8000/health; do
            echo "Waiting for API health check..."
            sleep 5
          done'
          echo "API is healthy!"
          
          # Test root endpoint
          echo "Testing root endpoint..."
          curl -sSf http://localhost:8000/ | grep -q "Cerverus API is running"
          echo "Root endpoint test passed!"
          
          # Test anomaly service health
          echo "Testing anomaly service health..."
          response=$(curl -s http://localhost:8000/api/v1/anomaly/health)
          
          # Validate response structure
          echo "$response" | grep -q '"status"'
          echo "Anomaly service health test passed!"
          
          # Show logs for debugging
          echo "=== API Logs ==="
          docker compose -f docker-compose.ci.yml logs api --tail 20
          
          # Cleanup
          docker compose -f docker-compose.ci.yml down -v